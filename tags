!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APIResponse	lib/insta.go	/^type APIResponse struct {$/;"	t
AppContext	lib/handlers.go	/^type AppContext struct {$/;"	t
AuthenticateUser	lib/authenticator.go	/^func AuthenticateUser(context *AppContext, w http.ResponseWriter, r *http.Request) (status int, err error) {$/;"	f
AuthenticationResponse	lib/insta.go	/^type AuthenticationResponse struct {$/;"	t
AuthenticationUser	lib/insta.go	/^type AuthenticationUser struct {$/;"	t
AuthroizeHandler	lib/handlers.go	/^func AuthroizeHandler(context *AppContext, w http.ResponseWriter, r *http.Request) (revVal int, err error) {$/;"	f
BaseHandler	lib/handlers.go	/^func BaseHandler(context *AppContext, w http.ResponseWriter, r *http.Request) (retVal int, err error) {$/;"	f
Delete	lib/session_manager.go	/^func (st *Session) Delete(key interface{}) error {$/;"	f
DigitialMediaInfo	lib/insta.go	/^type DigitialMediaInfo struct {$/;"	t
DownloadImages	lib/downloader.go	/^func DownloadImages(images []string) (int, bool) {$/;"	f
Get	lib/session_manager.go	/^func (st *Session) Get(key interface{}) interface{} {$/;"	f
GetAuthToken	lib/authenticator.go	/^func GetAuthToken(applicationContext *AppContext, w http.ResponseWriter, req *http.Request, code string) (token AuthenticationResponse, err error) {$/;"	f
Handler	lib/handlers.go	/^type Handler struct {$/;"	t
ImageDetails	lib/insta.go	/^type ImageDetails struct {$/;"	t
ImageMetaData	lib/insta.go	/^type ImageMetaData struct {$/;"	t
LoadImages	lib/communicator.go	/^func LoadImages(context *AppContext, searchTerm, authToken string) ([]string, error) {$/;"	f
MetaData	lib/insta.go	/^type MetaData struct {$/;"	t
NewSessionManager	lib/session_manager.go	/^func NewSessionManager(cookieName string, maxlifetime int64) (*SessionManager, error) {$/;"	f
PaginationObject	lib/insta.go	/^type PaginationObject struct {$/;"	t
SearchHandler	lib/search.go	/^func SearchHandler(context *AppContext, w http.ResponseWriter, r *http.Request) (revVal int, err error) {$/;"	f
ServeHTTP	lib/handlers.go	/^func (handler Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {$/;"	f
Session	lib/session_manager.go	/^type Session struct {$/;"	t
SessionDestroy	lib/session_manager.go	/^func (manager *SessionManager) SessionDestroy(sessionID string) error {$/;"	f
SessionID	lib/session_manager.go	/^func (st *Session) SessionID() string {$/;"	f
SessionManager	lib/session_manager.go	/^type SessionManager struct {$/;"	t
SessionRead	lib/session_manager.go	/^func (manager *SessionManager) SessionRead(sid string) (Session, error) {$/;"	f
SessionStart	lib/session_manager.go	/^func (manager *SessionManager) SessionStart(w http.ResponseWriter, r *http.Request) (session Session) {$/;"	f
Set	lib/session_manager.go	/^func (st *Session) Set(key, value interface{}) error {$/;"	f
TagResponse	lib/insta.go	/^type TagResponse struct {$/;"	t
TestCommunicator	lib/communicator_test.go	/^func TestCommunicator(t *testing.T) {$/;"	f
UploadHandler	lib/handlers.go	/^func UploadHandler(context *AppContext, w http.ResponseWriter, r *http.Request) (revVal int, err error) {$/;"	f
authToken	lib/authenticator.go	/^	var authToken AuthenticationResponse$/;"	v
downloadResult	lib/downloader.go	/^	var downloadResult []string$/;"	v
downloader	lib/downloader.go	/^func downloader(links <-chan string, results chan<- string) {$/;"	f
executeTemplate	lib/templates.go	/^func executeTemplate(context *AppContext, name string, params map[string]interface{}) []byte {$/;"	f
fetchImages	lib/communicator.go	/^func fetchImages(context *AppContext, serverURI, authToken string) ([]string, error) {$/;"	f
fetchServerResponse	lib/communicator.go	/^func fetchServerResponse(context *AppContext, serverURI string) (APIResponse, error) {$/;"	f
getSessionID	lib/session_manager.go	/^func (manager *SessionManager) getSessionID() string {$/;"	f
init	main.go	/^func init() {$/;"	f
main	main.go	/^func main() {$/;"	f
maxGoRoutines	lib/downloader.go	/^	var maxGoRoutines int$/;"	v
renderIndex	lib/handlers.go	/^func renderIndex(context *AppContext, userWrapper interface{}) []byte {$/;"	f
responseMap	lib/communicator.go	/^	var responseMap APIResponse$/;"	v
sessionInit	lib/session_manager.go	/^func (manager *SessionManager) sessionInit(sessionID string) (Session, error) {$/;"	f
tinyUser	lib/handlers.go	/^type tinyUser struct {$/;"	t
validateAndStartSession	lib/handlers.go	/^func validateAndStartSession(context *AppContext, w http.ResponseWriter, r *http.Request) Session {$/;"	f
we	lib/communicator.go	/^			context.Log.Println("The mediatype we got is: ", mediaType)$/;"	t
